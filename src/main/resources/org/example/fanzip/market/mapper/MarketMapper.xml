<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.fanzip.market.mapper.MarketMapper">

    <!-- 상품 조회 -->
    <select id="getProducts"
            resultType="org.example.fanzip.market.dto.ProductListDto"
            parameterType="map">
        SELECT
            p.product_id        AS productId,
            p.name,
            p.price,
            p.discounted_price  AS discountedPrice,
            p.discount_rate     AS discountRate,
            p.thumbnail_image   AS thumbnailImage,
            p.stock,
            p.categories,
            CASE WHEN ms.user_id IS NOT NULL THEN 1 ELSE 0 END AS subscribed,
            IFNULL(ms.grade_id, 0)   as gradeId,
            CASE WHEN EXISTS (
                SELECT 1
                FROM (
                         SELECT DISTINCT i2.category
                         FROM memberships m2
                         JOIN influencers i2 ON i2.influencer_id = m2.influencer_id
                         WHERE m2.user_id = #{userId}
                           AND m2.status = 'ACTIVE'
                ) sic
                WHERE sic.category = i.category
            ) THEN 1 ELSE 0 END AS sameInfCategory,
            CASE WHEN EXISTS (
                SELECT 1
                FROM JSON_TABLE(p.categories, '$[*]'
                                COLUMNS(cat VARCHAR(50) PATH '$')) pc
                JOIN (
                    SELECT DISTINCT jt.cat
                    FROM products sp
                             JOIN memberships m3
                                  ON m3.influencer_id = sp.influencer_id
                                      AND m3.user_id = #{userId}
                                      AND m3.status = 'ACTIVE'
                             JOIN JSON_TABLE(sp.categories, '$[*]'
                                             COLUMNS(cat VARCHAR(50) PATH '$')) jt
                ) subpc ON subpc.cat = pc.cat
            ) THEN 1 ELSE 0 END AS catMatch
        FROM products p
        JOIN influencers i ON i.influencer_id = p.influencer_id
        LEFT JOIN memberships ms
             ON ms.influencer_id = p.influencer_id
             AND ms.user_id = #{userId}
             AND ms.status = 'ACTIVE'
        <where>
            <if test="lastProductId != null">
                p.product_id &lt; #{lastProductId}
            </if>
            <if test="category != null and category != ''">
                <if test="lastProductId != null"> AND </if>
                JSON_CONTAINS(p.categories, JSON_QUOTE(#{category}), '$')
            </if>
            <if test="onlySubscribed">
                <if test="lastProductId != null or (category != null and category != '')"> AND </if>
                ms.user_id IS NOT NULL
            </if>
        </where>
        <choose>
            <when test="onlySubscribed">
                ORDER BY gradeId DESC, p.product_id DESC
            </when>
            <when test="sort == 'latest'">
                ORDER BY p.product_id DESC
            </when>
            <when test="sort == 'priceAsc'">
                ORDER BY p.discounted_price ASC, p.product_id DESC
            </when>
            <otherwise>
            ORDER BY
                subscribed DESC,
                gradeId DESC,
                sameInfCategory DESC,
                catMatch DESC,
                p.product_id DESC
            </otherwise>
        </choose>
        LIMIT #{limit}
    </select>

    <!-- 상세 상품 내역 조회 -->
    <select id="findProductById"
            resultType="org.example.fanzip.market.dto.ProductDetailDto"
            parameterType="map">
        select
            p.product_id            as productId,
            p.influencer_id         as influencerId,
            p.name,
            p.price,
            p.discounted_price      as discountedPrice,
            p.discount_rate         as discountRate,
            p.shipping_price        as shippingPrice,
            p.stock,
            p.thumbnail_image       as thumbnailImage,
            p.detail_images         as detailImages,
            p.description_images    as descriptionImages,
            p.categories            as categories,
            case m.grade_id
                when 1 then p.white_open_time
                when 2 then p.silver_open_time
                when 3 then p.gold_open_time
                when 4 then p.vip_open_time
                else p.general_open_time
            end                     as openTime,
            case
                when now() >= case m.grade_id
                    when 1 then p.white_open_time
                    when 2 then p.silver_open_time
                    when 3 then p.gold_open_time
                    when 4 then p.vip_open_time
                    else p.general_open_time
                    end
                then true else false
            end                  as isAvailable
        from products p left join memberships m
            on m.user_id = #{userId}
            and m.influencer_id = p.influencer_id
        where p.product_id = #{productId}
    </select>

     <!-- 검색 -->
    <select id="searchProducts"
            parameterType="map"
            resultType="org.example.fanzip.market.dto.ProductListDto">
        SELECT
            p.product_id        AS productId,
            p.name,
            p.price,
            p.discounted_price  AS discountedPrice,
            p.discount_rate     AS discountRate,
            p.thumbnail_image   AS thumbnailImage,
            p.stock,
            p.categories,
            CASE WHEN ms.user_id IS NOT NULL THEN 1 ELSE 0 END AS subscribed,
            IFNULL(ms.grade_id, 0)   as gradeId,
            CASE WHEN EXISTS (
                SELECT 1
                FROM (
                         SELECT DISTINCT i2.category
                         FROM memberships m2
                                  JOIN influencers i2 ON i2.influencer_id = m2.influencer_id
                         WHERE m2.user_id = #{userId}
                           AND m2.status = 'ACTIVE'
                     ) sic
                WHERE sic.category = i.category
            ) THEN 1 ELSE 0 END AS sameInfCategory,
            CASE WHEN EXISTS (
                SELECT 1
                FROM JSON_TABLE(p.categories, '$[*]'
                                COLUMNS(cat VARCHAR(50) PATH '$')) pc
                         JOIN (
                    SELECT DISTINCT jt.cat
                    FROM products sp
                             JOIN memberships m3
                                  ON m3.influencer_id = sp.influencer_id
                                      AND m3.user_id = #{userId}
                                      AND m3.status = 'ACTIVE'
                             JOIN JSON_TABLE(sp.categories, '$[*]'
                                             COLUMNS(cat VARCHAR(50) PATH '$')) jt
                ) subpc ON subpc.cat = pc.cat
            ) THEN 1 ELSE 0 END AS catMatch
        FROM products p
                 JOIN influencers i ON i.influencer_id = p.influencer_id
                 LEFT JOIN memberships ms
                           ON ms.influencer_id = p.influencer_id
                               AND ms.user_id = #{userId}
                               AND ms.status = 'ACTIVE'
        <where>
            p.name LIKE CONCAT('%', #{keyword}, '%')
            <if test="lastProductId != null">
                AND p.product_id &lt; #{lastProductId}
            </if>
            <if test="category != null and category != ''">
                AND JSON_CONTAINS(p.categories, JSON_QUOTE(#{category}), '$')
            </if>
        </where>
        <choose>
            <when test="sort == 'latest'">
                ORDER BY p.product_id DESC
            </when>
            <when test="sort == 'priceAsc'">
                ORDER BY p.discounted_price ASC, p.product_id DESC
            </when>
            <otherwise>
                ORDER BY
                subscribed DESC,
                gradeId DESC,
                sameInfCategory DESC,
                catMatch DESC,
                p.product_id DESC
            </otherwise>
        </choose>
        LIMIT #{limit}
    </select>

    <!-- 재고 조회 -->
    <select id="getStock"
            parameterType="long"
            resultType="int">
        select stock
        from products
        where product_id = #{productId}
    </select>

    <!-- 상품 추가 -->
    <insert id="insertProduct"
            parameterType="org.example.fanzip.market.domain.MarketVO"
            useGeneratedKeys="true"
            keyProperty="productId">
        insert into products (
            influencer_id,
            name,
            description,
            price,
            discounted_price,
            shipping_price,
            stock,
            thumbnail_image,
            detail_images,
            description_images,
            white_open_time,
            silver_open_time,
            gold_open_time,
            vip_open_time,
            general_open_time,
            categories
        ) values (
            #{influencerId},
            #{name},
            #{description},
            #{price},
            #{discountedPrice},
            #{shippingPrice},
            #{stock},
            #{thumbnailImage},
            #{detailImages},
            #{descriptionImages},
            #{whiteOpenTime},
            #{silverOpenTime},
            #{goldOpenTime},
            #{vipOpenTime},
            #{generalOpenTime},
            #{categories}
        )
    </insert>

    <!-- 마지막 삽입된 ID 조회 -->
    <select id="getLastInsertId" resultType="long">
        SELECT LAST_INSERT_ID()
    </select>
</mapper>
