<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.example.fanzip.influencer.mapper.InfluencerMapper">

    <resultMap id="InfluencerResultMap" type="org.example.fanzip.influencer.domain.InfluencerVO">
        <id column="influencer_id" property="influencerId"/>
        <result column="influencer_name" property="influencerName"/>
        <result column="category" property="category" javaType="org.example.fanzip.influencer.domain.enums.InfluencerCategory"/>
        <result column="profile_image" property="profileImage"/>
    </resultMap>

    <resultMap id="InfluencerDetailResultMap" type="org.example.fanzip.influencer.domain.InfluencerVO">
        <id column="influencer_id" property="influencerId"/>
        <result column="influencer_name" property="influencerName"/>
        <result column="category" property="category" javaType="org.example.fanzip.influencer.domain.enums.InfluencerCategory"/>
        <result column="profile_image" property="profileImage"/>
        <result column="fancard_image" property="fanCardImage"/>
        <result column="description" property="description"/>
    </resultMap>

    <select id="findAllFiltered" resultMap="InfluencerResultMap" parameterType="map">
        SELECT
        influencer_id, influencer_name, category, profile_image

        FROM influencers

        <where>
            <!--
            유저가 이미 구독중인 인플루언서는 제외하고 보여줌
            AND
            카테고리 필터링
             -->
            influencer_id NOT IN (
            SELECT influencer_id
            FROM memberships
            WHERE user_id = #{userId}
            AND status = 'ACTIVE'
            AND subscription_end >= CURDATE()
            )

            <if test="category != null">
                AND category = #{category}
            </if>
        </where>
    </select>


    <!-- 상세 조회 -->
    <select id="findDetailed" resultMap="InfluencerDetailResultMap" parameterType="long">
        SELECT influencer_id, influencer_name, category, profile_image, fancard_image, description
        FROM influencers
        WHERE influencer_id = #{influencerId}
    </select>

    <!-- 마이페이지: 프로필 조회 -->
    <select id="findProfile" resultMap="InfluencerDetailResultMap" parameterType="long">
        SELECT influencer_id, influencer_name, category, profile_image, fancard_image, description
        FROM influencers
        WHERE influencer_id = #{influencerId}
    </select>

    <!-- 마이페이지: 프로필 수정 -->
    <update id="updateProfile" parameterType="map">
        UPDATE influencers
        SET influencer_name = #{influencerName},
            description = #{description},
            category = #{category},
            updated_at = NOW()
        WHERE influencer_id = #{influencerId}
    </update>

    <!-- 마이페이지: 프로필 이미지 수정 -->
    <update id="updateProfileImage" parameterType="map">
        UPDATE influencers
        SET profile_image = #{profileImage},
            updated_at = NOW()
        WHERE influencer_id = #{influencerId}
    </update>

    <!-- 팬카드 이미지 수정 -->
    <update id="updateFanCardImageUrl" parameterType="map">
        UPDATE influencers
        SET fancard_image = #{fanCardImage},
            updated_at = NOW()
        WHERE influencer_id = #{influencerId}
    </update>

    <!-- 팬카드 이미지 조회 -->
    <select id="selectFanCardImageUrl" resultType="string" parameterType="long">
        SELECT fancard_image
        FROM influencers
        WHERE influencer_id = #{influencerId}
    </select>

    <!-- 프로필 이미지 조회 -->
    <select id="selectProfileImageUrl" resultType="string" parameterType="long">
        SELECT profile_image
        FROM influencers
        WHERE influencer_id = #{influencerId}
    </select>


    <!-- 일별 구독자 통계 -->
    <select id="getSubscriberStatsDaily" resultType="org.example.fanzip.influencer.dto.SubscriberStatsResponseDTO" parameterType="long">
        SELECT
            DATE_FORMAT(d.date, '%e일') as date,
            COALESCE(COUNT(m.membership_id), 0) as subscriberCount
        FROM (
            SELECT DATE_SUB(CURDATE(), INTERVAL 6 DAY) as date
            UNION ALL SELECT DATE_SUB(CURDATE(), INTERVAL 5 DAY)
            UNION ALL SELECT DATE_SUB(CURDATE(), INTERVAL 4 DAY)
            UNION ALL SELECT DATE_SUB(CURDATE(), INTERVAL 3 DAY)
            UNION ALL SELECT DATE_SUB(CURDATE(), INTERVAL 2 DAY)
            UNION ALL SELECT DATE_SUB(CURDATE(), INTERVAL 1 DAY)
            UNION ALL SELECT CURDATE()
            ) d
        LEFT JOIN memberships m ON 
            m.subscription_start = d.date
            AND m.influencer_id = #{influencerId}
            AND m.status = 'ACTIVE'
        GROUP BY d.date
        ORDER BY d.date ASC
    </select>

    <!-- 주별 구독자 통계 -->
    <select id="getSubscriberStatsWeekly" resultType="org.example.fanzip.influencer.dto.SubscriberStatsResponseDTO" parameterType="long">
    <![CDATA[
        SELECT
            CASE
                WHEN d.week_number = 6 THEN '6주전'
                WHEN d.week_number = 5 THEN '5주전'
                WHEN d.week_number = 4 THEN '4주전'
                WHEN d.week_number = 3 THEN '3주전'
                WHEN d.week_number = 2 THEN '2주전'
                WHEN d.week_number = 1 THEN '1주전'
                END as date,
        COALESCE(COUNT(m.membership_id), 0) as subscriberCount
        FROM (
            SELECT 6 as week_number, DATE_SUB(DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY), INTERVAL 6*7 DAY) as week_start
            UNION ALL SELECT 5, DATE_SUB(DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY), INTERVAL 5*7 DAY)
            UNION ALL SELECT 4, DATE_SUB(DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY), INTERVAL 4*7 DAY)
            UNION ALL SELECT 3, DATE_SUB(DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY), INTERVAL 3*7 DAY)
            UNION ALL SELECT 2, DATE_SUB(DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY), INTERVAL 2*7 DAY)
            UNION ALL SELECT 1, DATE_SUB(DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY), INTERVAL 1*7 DAY)
            ) d
            LEFT JOIN memberships m ON
            m.subscription_start >= d.week_start
            AND m.subscription_start < DATE_ADD(d.week_start, INTERVAL 7 DAY)
            AND m.influencer_id = #{influencerId}
            AND m.status = 'ACTIVE'
        GROUP BY d.week_number, d.week_start
        ORDER BY d.week_number DESC
        ]]>
    </select>

    <!-- 월별 구독자 통계 -->
    <select id="getSubscriberStatsMonthly" resultType="org.example.fanzip.influencer.dto.SubscriberStatsResponseDTO" parameterType="long">
        SELECT
            CONCAT(d.month_number, '월') as date,
        COALESCE(COUNT(m.membership_id), 0) as subscriberCount
        FROM (
            SELECT 2 as month_number, '2025-02-01' as month_start, '2025-02-28' as month_end
            UNION ALL SELECT 3, '2025-03-01', '2025-03-31'
            UNION ALL SELECT 4, '2025-04-01', '2025-04-30'
            UNION ALL SELECT 5, '2025-05-01', '2025-05-31'
            UNION ALL SELECT 6, '2025-06-01', '2025-06-30'
            UNION ALL SELECT 7, '2025-07-01', '2025-07-31'
            UNION ALL SELECT 8, '2025-08-01', '2025-08-31'
            ) d
            LEFT JOIN memberships m ON
            m.subscription_start BETWEEN d.month_start AND d.month_end
            AND m.influencer_id = #{influencerId}
            AND m.status = 'ACTIVE'
        GROUP BY d.month_number, d.month_start
        ORDER BY d.month_number ASC
    </select>


    <!-- 실시간 구독자 현황 -->
    <select id="getSubscriberStatus" resultType="org.example.fanzip.influencer.dto.SubscriberStatusResponseDTO" parameterType="long">
        <![CDATA[
        SELECT 
            #{influencerId} as influencerId,
            (
                SELECT COUNT(*)
                FROM memberships
                WHERE influencer_id = #{influencerId}
                AND status = 'ACTIVE'
                AND (subscription_end IS NULL OR subscription_end > NOW())
            ) as totalSubscribers,
            (
                (
                    SELECT COUNT(*)
                    FROM memberships
                    WHERE influencer_id = #{influencerId}
                    AND DATE(subscription_start) = CURDATE()
                    AND status = 'ACTIVE'
                ) - (
                    SELECT COUNT(*)
                    FROM memberships
                    WHERE influencer_id = #{influencerId}
                    AND DATE(subscription_end) = CURDATE()
                    AND status = 'CANCELLED'
                )
            ) as todayNetChange
        ]]>
    </select>
    <select id="findMyProfile" resultType="org.example.fanzip.influencer.domain.InfluencerVO">
        SELECT influencer_id, influencer_name, category, profile_image, fancard_image, description
        FROM influencers
        WHERE user_id = #{userId}
    </select>

</mapper>
